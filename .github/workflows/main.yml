name: CI
on: [push]
env:
  CI: true
jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm test --ci --coverage --maxWorkers=2

  publish:
    name: "Publish"
    runs-on: ubuntu-latest
    needs:
      - build
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Pull versions
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Set version from git
        id: tagversion
        run: |
          node <<EOL
            const fs = require('fs');
            const execSync = require('child_process').execSync;
            const package = JSON.parse(fs.readFileSync('package.json'));
            const tagVersion = execSync('git describe --tags --exact-match').toString().substring(1).trim();
            package.version = tagVersion;
            fs.writeFileSync('package.json', JSON.stringify(package));
            if(tagVersion.match(/^[0-9]+\.[0-9]+\.[0-9]+$/)) {
              console.log('::set-output name=disttag::latest');
            } else if(tagVersion.match(/^[0-9]+\.[0-9]+\.[0-9]+\-/)) {
              console.log('::set-output name=disttag::next');
            } else {
              console.log('::set-output name=disttag::null');
            }
          EOL
      - name: Publish to npm ${{ steps.tagversion.outputs.disttag }}
        if: "steps.tagversion.outputs.disttag != 'null'"
        run: npm publish --tag ${{ steps.tagversion.outputs.disttag }}
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
